import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å
API_TOKEN = '7925011476:AAEHrn0QkfwwBUTL4xz0HGP3j57S07d1whU'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è


class TrialLessonFSM(StatesGroup):
    goal = State()
    level = State()
    age = State()
    teacher_pref = State()
    format_pref = State()
    time = State()


# –ö–Ω–æ–ø–∫–∏
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"))


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —à–∫–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=start_kb)


@dp.message_handler(lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
async def book_trial(message: types.Message):
    await TrialLessonFSM.goal.set()
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—á–µ–º –≤–∞–º –Ω—É–∂–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π? –†–∞–±–æ—Ç–∞, —É—á—ë–±–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è?")


@dp.message_handler(state=TrialLessonFSM.goal)
async def process_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await TrialLessonFSM.level.set()
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ? (–ù–∞—á–∞–ª—å–Ω—ã–π, –°—Ä–µ–¥–Ω–∏–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)")


@dp.message_handler(state=TrialLessonFSM.level)
async def process_level(message: types.Message, state: FSMContext):
    await state.update_data(level=message.text)
    await TrialLessonFSM.age.set()
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")


@dp.message_handler(state=TrialLessonFSM.age)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await TrialLessonFSM.teacher_pref.set()
    await message.answer("–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è-—Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ/–∫–∞–∑–∞—Ö–æ—è–∑—ã—á–Ω–æ–≥–æ –∏–ª–∏ –Ω–æ—Å–∏—Ç–µ–ª—è —è–∑—ã–∫–∞?")


@dp.message_handler(state=TrialLessonFSM.teacher_pref)
async def process_teacher(message: types.Message, state: FSMContext):
    await state.update_data(teacher=message.text)
    await TrialLessonFSM.format_pref.set()
    await message.answer("–£–¥–æ–±–Ω–µ–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω?")


@dp.message_handler(state=TrialLessonFSM.format_pref)
async def process_format(message: types.Message, state: FSMContext):
    await state.update_data(format=message.text)
    await TrialLessonFSM.time.set()
    await message.answer("–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫? (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä; –±—É–¥–Ω–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ?)")


@dp.message_handler(state=TrialLessonFSM.time)
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    data = await state.get_data()

    summary = (
        f"–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —á—Ç–æ —è –∑–∞–ø–∏—Å–∞–ª:\n"
        f"üéØ –¶–µ–ª—å: {data['goal']}\n"
        f"üìö –£—Ä–æ–≤–µ–Ω—å: {data['level']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {data['teacher']}\n"
        f"üíª –§–æ—Ä–º–∞—Ç: {data['format']}\n"
        f"üïí –í—Ä–µ–º—è: {data['time']}\n\n"
        f"–ú—ã –ø–æ–¥–±–µ—Ä—ë–º –¥–ª—è –≤–∞—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —É—Ä–æ–∫–µ! üòä"
    )

    await message.answer(summary)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
